{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RecuperarPasswdComponent = class RecuperarPasswdComponent {\n  constructor(authHttsService, router) {\n    this.authHttsService = authHttsService;\n    this.router = router;\n    this.emailRecPasswdEnviado = -1;\n    this.onRecPasswd = new EventEmitter();\n    this.emailRecPasswdForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")])\n    });\n    this.codForm = new FormGroup({\n      cod: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")])\n    });\n  }\n  ngOnInit() {\n    this.emailRecPasswdEnviado = -1;\n  }\n  mandarEmailRecPasswd() {\n    this.authHttsService.solicitarRecPasswd(this.emailRecPasswdForm.get('email')?.value).subscribe(resp => {\n      if (resp.success) {\n        localStorage.setItem('user', JSON.stringify({\n          id: resp.id\n        }));\n        this.emailRecPasswdEnviado = 0;\n        this.onRecPasswd.emit(2);\n      } else {\n        this.emailRecPasswdEnviado = 1;\n        this.onRecPasswd.emit(3);\n      }\n    });\n  }\n  recuperarPasswd() {\n    const user = JSON.parse(localStorage.getItem('user') || '');\n    this.authHttsService.recuperarPasswd(user.id, this.codForm.get('cod')?.value).subscribe(resp => {\n      if (resp.success) {\n        this.onRecPasswd.emit(0);\n      } else {\n        this.onRecPasswd.emit(1);\n      }\n    });\n  }\n  irAlLogin() {\n    this.router.navigate(['/auth/login']);\n  }\n};\n__decorate([Output()], RecuperarPasswdComponent.prototype, \"onRecPasswd\", void 0);\nRecuperarPasswdComponent = __decorate([Component({\n  selector: 'app-recuperar-passwd',\n  templateUrl: './recuperar-passwd.component.html',\n  styleUrls: ['./recuperar-passwd.component.scss']\n})], RecuperarPasswdComponent);\nexport { RecuperarPasswdComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC/D,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAqB,gBAAgB;AASzE,IAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAInCC,YACUC,eAA4B,EAC5BC,MAAc;IADd,oBAAe,GAAfD,eAAe;IACf,WAAM,GAANC,MAAM;IAJhB,0BAAqB,GAAW,CAAC,CAAC;IAYxB,gBAAW,GAAyB,IAAIR,YAAY,EAAE;IAEhE,uBAAkB,GAAc,IAAIG,SAAS,CAAC;MAC5CM,KAAK,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACO,OAAO,CAAC,2CAA2C,CAAC,CAAC;KAClH,CAAC;IAEF,YAAO,GAAc,IAAIR,SAAS,CAAC;MACjCS,GAAG,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACO,OAAO,CAAC,2CAA2C,CAAC,CAAC;KAChH,CAAC;EAfC;EAEHE,QAAQ;IAEN,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;EACjC;EAaAC,oBAAoB;IAClB,IAAI,CAACR,eAAe,CAACS,kBAAkB,CAAC,IAAI,CAACC,kBAAkB,CAACC,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MACpG,IAAIA,IAAI,CAACC,OAAO,EAAE;QAEhBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACC,EAAE,EAAEN,IAAI,CAACM;QAAE,CAAC,CAAC,CAAC;QAC3D,IAAI,CAACb,qBAAqB,GAAG,CAAC;QAC9B,IAAI,CAACc,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;OACzB,MACI;QACH,IAAI,CAACf,qBAAqB,GAAG,CAAC;QAC9B,IAAI,CAACc,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;;IAG5B,CAAC,CAAC;EACJ;EAGAC,eAAe;IACb,MAAMC,IAAI,GAAGN,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC3D,IAAI,CAAC1B,eAAe,CAACuB,eAAe,CAACC,IAAI,CAACJ,EAAE,EAAE,IAAI,CAACO,OAAO,CAAChB,GAAG,CAAC,KAAK,CAAC,EAAEC,KAAK,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MAC7F,IAAIA,IAAI,CAACC,OAAO,EAAE;QAEhB,IAAI,CAACM,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;OACzB,MACI;QACH,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC;;IAE5B,CAAC,CAAC;EACJ;EAEAM,SAAS;IACP,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;CACD;AA5CWC,YAATpC,MAAM,EAAE,6DAAwD;AAdtDI,wBAAwB,eALpCN,SAAS,CAAC;EACTuC,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GACWnC,wBAAwB,CA0DpC;SA1DYA,wBAAwB","names":["Component","EventEmitter","Output","FormControl","FormGroup","Validators","RecuperarPasswdComponent","constructor","authHttsService","router","email","required","pattern","cod","ngOnInit","emailRecPasswdEnviado","mandarEmailRecPasswd","solicitarRecPasswd","emailRecPasswdForm","get","value","subscribe","resp","success","localStorage","setItem","JSON","stringify","id","onRecPasswd","emit","recuperarPasswd","user","parse","getItem","codForm","irAlLogin","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\auth\\recuperar-passwd\\recuperar-passwd.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormsModule } from '@angular/forms';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-recuperar-passwd',\r\n  templateUrl: './recuperar-passwd.component.html',\r\n  styleUrls: ['./recuperar-passwd.component.scss']\r\n})\r\nexport class RecuperarPasswdComponent {\r\n\r\n  emailRecPasswdEnviado: number = -1;\r\n\r\n  constructor(\r\n    private authHttsService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n\r\n    this.emailRecPasswdEnviado = -1;\r\n  }\r\n\r\n  @Output() onRecPasswd: EventEmitter<number> = new EventEmitter();\r\n\r\n  emailRecPasswdForm: FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")])\r\n  });\r\n\r\n  codForm: FormGroup = new FormGroup({\r\n    cod: new FormControl('', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")])\r\n  });\r\n\r\n\r\n  mandarEmailRecPasswd() {\r\n    this.authHttsService.solicitarRecPasswd(this.emailRecPasswdForm.get('email')?.value).subscribe(resp => {\r\n      if (resp.success) {\r\n\r\n        localStorage.setItem('user', JSON.stringify({id: resp.id}));\r\n        this.emailRecPasswdEnviado = 0;\r\n        this.onRecPasswd.emit(2);\r\n      }\r\n      else {\r\n        this.emailRecPasswdEnviado = 1;\r\n        this.onRecPasswd.emit(3);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n\r\n  recuperarPasswd() {\r\n    const user = JSON.parse(localStorage.getItem('user') || '');\r\n    this.authHttsService.recuperarPasswd(user.id, this.codForm.get('cod')?.value).subscribe(resp => {\r\n      if (resp.success) {\r\n\r\n        this.onRecPasswd.emit(0);\r\n      }\r\n      else {\r\n        this.onRecPasswd.emit(1);\r\n      }\r\n    });\r\n  }\r\n\r\n  irAlLogin() {\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}