{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContenidoService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"http://127.0.0.1:8090/api/noticias\";\n    this.noticias = [];\n  }\n  getListado() {\n    return this.http.get(`${this.baseURL}/noticias`).pipe(tap(resp => {\n      if (resp !== \"No encontrada\") {\n        this.noticias = resp;\n      }\n    }));\n  }\n  get resultado() {\n    return [...this.noticias];\n  }\n  agregar(noticia) {\n    this.noticias.unshift(noticia);\n  }\n  editar(id, noticia) {\n    console.log(id);\n    console.log(noticia);\n    let posicion = this.noticias.findIndex(n => n.id == id);\n    console.log(posicion);\n    this.noticias[posicion] = noticia;\n    console.log(this.noticias);\n  }\n  borrar(id) {\n    let not = this.noticias.filter(noticia => noticia.id != id);\n    this.noticias = not;\n  }\n  borrarNoticia(id) {\n    return this.http.delete(`${this.baseURL}/borrar/${id}`);\n  }\n  editarNoticia(id, noticia) {\n    console.log(noticia);\n    const payload = new FormData();\n    payload.append('id', id);\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    console.log(payload.get(\"titulo\"));\n    return this.http.put(`${this.baseURL}/modificar/`, payload);\n  }\n  obtenerInfo(id) {\n    let not = this.noticias.filter(noticia => noticia.id == id);\n    let noticia = {\n      titulo: not[0][\"titulo\"],\n      subtitulo: not[0][\"subtitulo\"],\n      contenido: not[0][\"contenido\"],\n      seccion: \"noticias\",\n      imagen: not[0][\"nombreImagen\"]\n    };\n    return noticia;\n  }\n  obtenerNoticia(id) {\n    let idnot = {\n      id: id\n    };\n    return this.http.post(`${this.baseURL}/get`, idnot);\n  }\n  añadirNoticia(noticia) {\n    const payload = new FormData();\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    return this.http.post(`${this.baseURL}/registrar`, payload);\n  }\n}\nContenidoService.ɵfac = function ContenidoService_Factory(t) {\n  return new (t || ContenidoService)(i0.ɵɵinject(i1.HttpClient));\n};\nContenidoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContenidoService,\n  factory: ContenidoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["tap","ContenidoService","constructor","http","getListado","get","baseURL","pipe","resp","noticias","resultado","agregar","noticia","unshift","editar","id","console","log","posicion","findIndex","n","borrar","not","filter","borrarNoticia","delete","editarNoticia","payload","FormData","append","titulo","subtitulo","contenido","seccion","imagen","put","obtenerInfo","obtenerNoticia","idnot","post","añadirNoticia","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\gestion-contenido\\contenido.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Contenido } from './Interfaces/Contenido.interface';\r\nimport { tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContenidoService {\r\n\r\n  private baseURL: string = \"http://127.0.0.1:8090/api/noticias\";\r\n  private noticias: any[] = [];\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getListado() {\r\n    return this.http.get<any>(`${this.baseURL}/noticias`).pipe(tap(resp => { if (resp !== \"No encontrada\") { this.noticias = resp } }))\r\n  }\r\n  get resultado() {\r\n    return [...this.noticias];\r\n  }\r\n  agregar(noticia: any) {\r\n    this.noticias.unshift(noticia);\r\n  }\r\n  editar(id: string, noticia: any) {\r\n    console.log(id);\r\n    console.log(noticia);\r\n    let posicion = this.noticias.findIndex(n => n.id == id);\r\n    console.log(posicion);\r\n    this.noticias[posicion] = noticia;\r\n    console.log(this.noticias);\r\n\r\n  }\r\n  borrar(id: string) {\r\n    let not = this.noticias.filter((noticia) => noticia.id != id);\r\n    this.noticias = not;\r\n  }\r\n  borrarNoticia(id: string): Observable<any> {\r\n    return this.http.delete<any>(`${this.baseURL}/borrar/${id}`);\r\n  }\r\n  editarNoticia(id: string, noticia: Contenido): Observable<any> {\r\n    console.log(noticia);\r\n    const payload = new FormData();\r\n    payload.append('id', id);\r\n    payload.append('titulo', noticia.titulo);\r\n    payload.append('subtitulo', noticia.subtitulo);\r\n    payload.append('contenido', noticia.contenido);\r\n    payload.append('seccion', noticia.seccion);\r\n    payload.append('archivo', noticia.imagen);\r\n    console.log(payload.get(\"titulo\"));\r\n\r\n\r\n    return this.http.put<any>(`${this.baseURL}/modificar/`, payload);\r\n  }\r\n  obtenerInfo(id: string): Contenido {\r\n    let not = this.noticias.filter((noticia) => noticia.id == id);\r\n    let noticia: Contenido = {\r\n      titulo: not[0][\"titulo\"],\r\n      subtitulo: not[0][\"subtitulo\"],\r\n      contenido: not[0][\"contenido\"],\r\n      seccion: \"noticias\",\r\n      imagen: not[0][\"nombreImagen\"]\r\n    }\r\n    return noticia;\r\n  }\r\n  obtenerNoticia(id: string): Observable<any> {\r\n    let idnot = {\r\n      id: id\r\n    }\r\n    return this.http.post<any>(`${this.baseURL}/get`, idnot);\r\n  }\r\n\r\n  añadirNoticia(noticia: Contenido): Observable<any> {\r\n    const payload = new FormData();\r\n    payload.append('titulo', noticia.titulo);\r\n    payload.append('subtitulo', noticia.subtitulo);\r\n    payload.append('contenido', noticia.contenido);\r\n    payload.append('seccion', noticia.seccion);\r\n    payload.append('archivo', noticia.imagen);\r\n\r\n    return this.http.post<any>(`${this.baseURL}/registrar`, payload);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}