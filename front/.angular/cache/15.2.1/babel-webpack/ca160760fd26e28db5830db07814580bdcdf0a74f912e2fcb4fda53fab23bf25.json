{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet PedirCitaPacienteComponent = class PedirCitaPacienteComponent {\n  constructor(pedirCitaHttpService, calendar, router, sharedService) {\n    this.pedirCitaHttpService = pedirCitaHttpService;\n    this.calendar = calendar;\n    this.router = router;\n    this.sharedService = sharedService;\n    this.onCitaPedida = new EventEmitter();\n    this.sinSeleccionar = true;\n    this.registrado = false;\n    this.noHayHoras = false;\n    this.horasDisponibles = [];\n    this.citaPedida = -1;\n    this.citaForm = new FormGroup({\n      hora: new FormControl('', [Validators.required]),\n      donacion: new FormControl('sangre', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.sinSeleccionar = true;\n    this.fecha = this.calendar.getToday();\n    this.transFecha(this.fecha);\n    this.compRegistro();\n  }\n  compRegistro() {\n    this.registrado = localStorage.getItem('user') != null;\n  }\n  transFecha(fechaCalendar) {\n    this.fechaSeleccionada = this.fecha.year + '-' + this.fecha.month + '-' + this.fecha.day;\n  }\n  traerHorario() {\n    this.pedirCitaHttpService.fetchHorasDisponibles(this.fechaSeleccionada).subscribe(resp => {\n      this.horasDisponibles = resp.horas;\n      if (this.horasDisponibles.length == 0) this.noHayHoras = true;\n    });\n  }\n  setDia(event) {\n    this.fecha = event;\n    this.transFecha(this.fecha);\n    this.traerHorario();\n    this.sinSeleccionar = false;\n  }\n  pedirCita() {\n    const id = JSON.parse(localStorage.getItem('user') || '{}').id;\n    const fechaCita = this.fechaSeleccionada + ' ' + this.citaForm.get('hora')?.value + ':00';\n    const tipoDonacion = this.citaForm.get('donacion')?.value;\n    this.pedirCitaHttpService.insertCita(id, fechaCita, tipoDonacion).subscribe(resp => {\n      if (resp.success) {\n        setTimeout(() => {\n          this.sharedService.citaPedida.next(0);\n        }, 1500);\n      } else {\n        setTimeout(() => {\n          this.sharedService.citaPedida.next(1);\n        }, 1500);\n      }\n      this.router.navigate(['']);\n    });\n  }\n};\n__decorate([Output()], PedirCitaPacienteComponent.prototype, \"onCitaPedida\", void 0);\nPedirCitaPacienteComponent = __decorate([Component({\n  selector: 'app-pedir-cita-paciente',\n  templateUrl: './pedir-cita-paciente.component.html',\n  styleUrls: ['./pedir-cita-paciente.component.scss']\n})], PedirCitaPacienteComponent);\nexport { PedirCitaPacienteComponent };","map":{"version":3,"mappings":"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","names":["Component","Output","EventEmitter","FormControl","FormGroup","Validators","PedirCitaPacienteComponent","constructor","pedirCitaHttpService","calendar","router","sharedService","hora","required","donacion","ngOnInit","sinSeleccionar","fecha","getToday","transFecha","compRegistro","registrado","localStorage","getItem","fechaCalendar","fechaSeleccionada","year","month","day","traerHorario","fetchHorasDisponibles","subscribe","resp","horasDisponibles","horas","length","noHayHoras","setDia","event","pedirCita","id","JSON","parse","fechaCita","citaForm","get","value","tipoDonacion","insertCita","success","setTimeout","citaPedida","next","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\citas\\pedir-cita-paciente\\pedir-cita-paciente.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';\r\nimport { CitasService } from '../services/citas.service';\r\nimport { FormControl, FormGroup, Validators, FormsModule } from '@angular/forms';\r\nimport { NgbDateStruct, NgbCalendar, NgbDatepickerModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DatePickerComponent } from '../date-picker/date-picker.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Route, Router } from '@angular/router';\r\nimport { SharedService } from 'src/app/shared/services/shared.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-pedir-cita-paciente',\r\n  templateUrl: './pedir-cita-paciente.component.html',\r\n  styleUrls: ['./pedir-cita-paciente.component.scss'],\r\n})\r\nexport class PedirCitaPacienteComponent {\r\n\r\n  @Output() onCitaPedida: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  fecha: NgbDateStruct;\r\n  sinSeleccionar = true;\r\n  registrado: boolean = false;\r\n  noHayHoras: boolean = false;\r\n  horasDisponibles: string[] = [];\r\n  fechaSeleccionada: string;\r\n  citaPedida: number = -1;\r\n\r\n  citaForm: FormGroup = new FormGroup({\r\n    hora: new FormControl('', [Validators.required]),\r\n    donacion: new FormControl('sangre', [Validators.required])\r\n  });\r\n\r\n\r\n  constructor(\r\n    private pedirCitaHttpService: CitasService,\r\n    private calendar: NgbCalendar,\r\n    private router: Router,\r\n    private sharedService: SharedService\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n    this.sinSeleccionar = true;\r\n    this.fecha = this.calendar.getToday();\r\n    this.transFecha(this.fecha);\r\n    this.compRegistro();\r\n  }\r\n\r\n\r\n  compRegistro() {\r\n     this.registrado = localStorage.getItem('user') != null;\r\n  }\r\n\r\n\r\n  transFecha(fechaCalendar: NgbDateStruct) {\r\n    this.fechaSeleccionada = this.fecha.year + '-' + this.fecha.month + '-' + this.fecha.day;\r\n  }\r\n\r\n\r\n  traerHorario() {\r\n    this.pedirCitaHttpService.fetchHorasDisponibles(this.fechaSeleccionada).subscribe(resp => {\r\n      this.horasDisponibles = resp.horas;\r\n      if (this.horasDisponibles.length == 0) this.noHayHoras = true;\r\n    });\r\n  }\r\n\r\n\r\n  setDia(event: NgbDateStruct) {\r\n    this.fecha = event;\r\n    this.transFecha(this.fecha);\r\n    this.traerHorario();\r\n    this.sinSeleccionar = false;\r\n  }\r\n\r\n\r\n  pedirCita() {\r\n    const id = JSON.parse(localStorage.getItem('user') || '{}').id;\r\n    const fechaCita = this.fechaSeleccionada\r\n      + ' ' + this.citaForm.get('hora')?.value + ':00';\r\n\r\n    const tipoDonacion = this.citaForm.get('donacion')?.value;\r\n\r\n    this.pedirCitaHttpService.insertCita(id, fechaCita, tipoDonacion).subscribe(resp => {\r\n      if (resp.success) {\r\n\r\n        setTimeout(() => {  \r\n          this.sharedService.citaPedida.next(0);\r\n        }, 1500);\r\n      }\r\n      else {\r\n\r\n        setTimeout(() => {\r\n\r\n          this.sharedService.citaPedida.next(1);\r\n        }, 1500);\r\n      }\r\n\r\n      this.router.navigate(['']);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}