{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ContactoConfigComponent = class ContactoConfigComponent {\n  constructor(ConfigService) {\n    this.ConfigService = ConfigService;\n    this.mensaje = '';\n    this.telefonos = [];\n    this.direcciones = [];\n    this.horarios = [];\n    this.hMostrar = [];\n    this.dSemana = [{\n      nombre: \"Lunes\",\n      letra: \"L\"\n    }, {\n      nombre: \"Martes\",\n      letra: \"M\"\n    }, {\n      nombre: \"Miércoles\",\n      letra: \"X\"\n    }, {\n      nombre: \"Jueves\",\n      letra: \"J\"\n    }, {\n      nombre: \"Viernes\",\n      letra: \"V\"\n    }];\n  }\n  ngOnInit() {\n    this.ConfigService.getHorarios().subscribe(resp => {\n      if (resp.success) {\n        this.horarios = resp.data;\n        this.crearHorarioMostrar();\n      }\n    });\n    this.ConfigService.getTelefonos().subscribe(resp => {\n      if (resp.success) this.telefonos = resp.data;\n    });\n    this.ConfigService.getDirecciones().subscribe(resp => {\n      if (resp.success) this.direcciones = resp.data;\n    });\n  }\n  guardar() {\n    this.ConfigService.updateContacto(this.direcciones, this.telefonos, this.crearHorarioGuardar()).subscribe(resp => {\n      this.mensaje = resp.msg;\n      this.actualizado = resp.success ? true : false;\n      setTimeout(() => this.mensaje = '', 4000);\n    });\n  }\n  addTelefono() {\n    this.telefonos.push({\n      id: -1,\n      numero: \"\",\n      extension: 0\n    });\n  }\n  addHorario() {\n    let listaDias = [];\n    this.dSemana.forEach(dia => {\n      listaDias.push(this.crearDia(dia.nombre, dia.letra, false));\n    });\n    this.addHorarioMostrar(listaDias);\n  }\n  deleteHorario(event) {}\n  deleteTelefono(event) {\n    console.log(event.target.closest('.telefono')?.getAttribute(\"data-id\"));\n  }\n  crearHorarioGuardar() {\n    let hGuardar = [];\n    let hBorrar = [];\n    this.hMostrar.forEach(horario => {\n      horario.dias.forEach(d => {\n        if (d.seleccionado) {\n          hGuardar.push({\n            id: d.id,\n            dia: d.valor,\n            hEntrada: horario.hEntrada,\n            hSalida: horario.hSalida\n          });\n        } else if (d.id != -1) hBorrar.push(d.id);\n      });\n    });\n    return {\n      guardar: hGuardar,\n      borrar: hBorrar\n    };\n  }\n  crearHorarioMostrar() {\n    let horas = [];\n    let diasHora = [];\n    let listaDias;\n    let idDia;\n    let selecc;\n    this.horarios.forEach(horario => {\n      if (!horas.find(h => h.entrada == horario.hEntrada && h.salida == horario.hSalida)) horas.push({\n        \"entrada\": horario.hEntrada,\n        \"salida\": horario.hSalida\n      });\n    });\n    horas.forEach(hora => {\n      listaDias = [];\n      diasHora = this.horarios.filter(h => h.hEntrada == hora.entrada && h.hSalida == hora.salida);\n      this.dSemana.forEach(dia => {\n        idDia = diasHora.find(d => d.dia == dia.nombre)?.id;\n        selecc = diasHora.find(d => d.dia == dia.nombre) ? true : false;\n        listaDias.push(this.crearDia(dia.nombre, dia.letra, selecc, idDia));\n      });\n      this.addHorarioMostrar(listaDias, hora.entrada, hora.salida);\n    });\n  }\n  addHorarioMostrar(listaDias, entrada = {\n    hours: 0,\n    minutes: 0\n  }, salida = {\n    hours: 0,\n    minutes: 0\n  }) {\n    this.hMostrar.push({\n      dias: listaDias,\n      hEntrada: entrada,\n      hSalida: salida\n    });\n  }\n  crearDia(valor, letra, selecc, id = -1) {\n    return {\n      id: id,\n      valor: valor,\n      letra: letra,\n      seleccionado: selecc\n    };\n  }\n};\nContactoConfigComponent = __decorate([Component({\n  selector: 'app-contacto-config',\n  templateUrl: './contacto-config.component.html',\n  styleUrls: ['./contacto-config.component.scss']\n})], ContactoConfigComponent);\nexport { ContactoConfigComponent };","map":{"version":3,"mappings":"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","names":["Component","ContactoConfigComponent","constructor","ConfigService","nombre","letra","ngOnInit","getHorarios","subscribe","resp","success","horarios","data","crearHorarioMostrar","getTelefonos","telefonos","getDirecciones","direcciones","guardar","updateContacto","crearHorarioGuardar","mensaje","msg","actualizado","setTimeout","addTelefono","push","id","numero","extension","addHorario","listaDias","dSemana","forEach","dia","crearDia","addHorarioMostrar","deleteHorario","event","deleteTelefono","console","log","target","closest","getAttribute","hGuardar","hBorrar","hMostrar","horario","dias","d","seleccionado","valor","hEntrada","hSalida","borrar","horas","diasHora","idDia","selecc","find","h","entrada","salida","hora","filter","hours","minutes","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\config\\contacto-config\\contacto-config.component.ts"],"sourcesContent":["import { Time } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { Dia, Direccion, Horario, HorarioMostrar, Telefono, Hora, HorarioGuardar } from '../interfaces/config.interface';\r\nimport { ConfigService } from '../services/config.service';\r\n\r\n@Component({\r\n  selector: 'app-contacto-config',\r\n  templateUrl: './contacto-config.component.html',\r\n  styleUrls: ['./contacto-config.component.scss']\r\n})\r\nexport class ContactoConfigComponent {\r\n\r\n  mensaje: String = '';\r\n  actualizado!: boolean;\r\n  telefonos: Telefono[] = [];\r\n  direcciones: Direccion[] = [];\r\n  horarios: Horario[] = [];\r\n  hMostrar: HorarioMostrar[] = [];\r\n  dSemana = [{ nombre: \"Lunes\", letra: \"L\" }, { nombre: \"Martes\", letra: \"M\" }, { nombre: \"Miércoles\", letra: \"X\" },\r\n  { nombre: \"Jueves\", letra: \"J\" }, { nombre: \"Viernes\", letra: \"V\" }];\r\n\r\n  constructor(private ConfigService: ConfigService) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.ConfigService.getHorarios().subscribe(resp => {\r\n      if (resp.success) {\r\n        this.horarios = resp.data;\r\n        this.crearHorarioMostrar();\r\n      }\r\n    });\r\n\r\n\r\n    this.ConfigService.getTelefonos().subscribe(resp => {\r\n      if (resp.success) this.telefonos = resp.data;\r\n    });\r\n\r\n\r\n    this.ConfigService.getDirecciones().subscribe(resp => {\r\n      if (resp.success) this.direcciones = resp.data;\r\n    });\r\n  }\r\n\r\n\r\n  guardar() {\r\n    this.ConfigService.updateContacto(this.direcciones, this.telefonos, this.crearHorarioGuardar())\r\n      .subscribe(resp => {\r\n\r\n        this.mensaje = resp.msg;\r\n        this.actualizado = (resp.success) ? true : false;\r\n\r\n        setTimeout(() => this.mensaje = '', 4000);\r\n      });\r\n  }\r\n\r\n\r\n  addTelefono() {\r\n    this.telefonos.push({\r\n      id: -1,\r\n      numero: \"\",\r\n      extension: 0\r\n    });\r\n  }\r\n\r\n\r\n  addHorario() {\r\n    let listaDias: Dia[] = [];\r\n\r\n    this.dSemana.forEach(dia => { //TODO: LLevar a función auxiliar\r\n      listaDias.push(this.crearDia(dia.nombre, dia.letra, false));\r\n    });\r\n\r\n    this.addHorarioMostrar(listaDias);\r\n  }\r\n\r\n\r\n  deleteHorario(event: Event) {\r\n\r\n  }\r\n\r\n\r\n  deleteTelefono(event: Event) {\r\n    console.log((event.target as HTMLElement).closest('.telefono')?.getAttribute(\"data-id\"))\r\n  }\r\n\r\n\r\n  crearHorarioGuardar() {\r\n    let hGuardar: Horario[] = [];\r\n    let hBorrar: number[] = [];\r\n\r\n    this.hMostrar.forEach(horario => {\r\n\r\n      horario.dias.forEach(d => {\r\n\r\n        if (d.seleccionado) {\r\n          hGuardar.push({\r\n            id: d.id,\r\n            dia: d.valor,\r\n            hEntrada: horario.hEntrada,\r\n            hSalida: horario.hSalida,\r\n          });\r\n        } else if (d.id != -1) hBorrar.push(d.id);\r\n      })\r\n    });\r\n\r\n    return { guardar: hGuardar, borrar: hBorrar };\r\n  }\r\n\r\n\r\n  crearHorarioMostrar() {\r\n    let horas: Hora[] = [];\r\n    let diasHora: Horario[] = [];\r\n    let listaDias: Dia[];\r\n    let idDia: number | undefined;\r\n    let selecc: boolean;\r\n\r\n    this.horarios.forEach(horario => { // Recojo los distintos grupos de horas\r\n      if (!horas.find(h => h.entrada == horario.hEntrada && h.salida == horario.hSalida))\r\n        horas.push({ \"entrada\": horario.hEntrada, \"salida\": horario.hSalida });\r\n    });\r\n\r\n    horas.forEach(hora => { // Recojo los días que tienen ese grupo de horas\r\n      listaDias = [];\r\n      diasHora = this.horarios.filter(h => h.hEntrada == hora.entrada && h.hSalida == hora.salida);\r\n\r\n      this.dSemana.forEach(dia => {\r\n        idDia = diasHora.find(d => d.dia == dia.nombre)?.id;\r\n        selecc = (diasHora.find(d => d.dia == dia.nombre)) ? true : false;\r\n        listaDias.push(this.crearDia(dia.nombre, dia.letra, selecc, idDia));\r\n      });\r\n\r\n      this.addHorarioMostrar(listaDias, hora.entrada, hora.salida);\r\n    });\r\n  }\r\n\r\n\r\n  addHorarioMostrar(listaDias: Dia[], entrada: Time = { hours: 0, minutes: 0 }, salida: Time = { hours: 0, minutes: 0 }) {\r\n    this.hMostrar.push({\r\n      dias: listaDias,\r\n      hEntrada: entrada,\r\n      hSalida: salida\r\n    });\r\n  }\r\n\r\n\r\n  crearDia(valor:string, letra:string, selecc:boolean, id:number = -1) {\r\n    return {\r\n      id: id,\r\n      valor: valor,\r\n      letra: letra,\r\n      seleccionado: selecc\r\n    }\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}