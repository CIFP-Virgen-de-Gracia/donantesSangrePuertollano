{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class ConfigGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authService.puedeModificar().pipe(tap(estaAutenticado => {\n      if (!estaAutenticado) {\n        this.router.navigate(['']);\n      }\n    }));\n  }\n  canMatch(route, segments) {\n    return this.authService.puedeModificar().pipe(tap(estaAutenticado => {\n      if (!estaAutenticado) {\n        this.router.navigate(['']);\n      }\n    }));\n  }\n}\nConfigGuard.ɵfac = function ConfigGuard_Factory(t) {\n  return new (t || ConfigGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nConfigGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigGuard,\n  factory: ConfigGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAMtC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,WAAwB,EACxBC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;EACZ;EAGJC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,OAAO,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE,CACrCC,IAAI,CACHT,GAAG,CAACU,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE9B,CAAC,CAAC,CACH;EACL;EAGAC,QAAQ,CACNN,KAAY,EACZO,QAAsB;IACpB,OAAO,IAAI,CAACV,WAAW,CAACK,cAAc,EAAE,CACvCC,IAAI,CACHT,GAAG,CAACU,eAAe,IAAG;MACpB,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE9B,CAAC,CAAC,CACH;EACL;;AAjCWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFV;AAAM","names":["tap","ConfigGuard","constructor","authService","router","canActivate","route","state","puedeModificar","pipe","estaAutenticado","navigate","canMatch","segments","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\auth\\guards\\config.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanMatch, Route, Router, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigGuard implements CanActivate, CanMatch {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.authService.puedeModificar()\r\n      .pipe(\r\n        tap(estaAutenticado => {\r\n          if (!estaAutenticado) {\r\n            this.router.navigate([''])\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  canMatch(\r\n    route: Route,\r\n    segments: UrlSegment[]): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n      return this.authService.puedeModificar()\r\n      .pipe(\r\n        tap(estaAutenticado => {\r\n          if (!estaAutenticado) {\r\n            this.router.navigate([''])\r\n          }\r\n        })\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}