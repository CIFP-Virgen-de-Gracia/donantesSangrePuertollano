{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CitasService {\n  constructor(httpPedirCita) {\n    this.httpPedirCita = httpPedirCita;\n    this.pedirCitaUrl = `${environment.baseUrl}/api/citas`;\n  }\n  fetchHorasDisponibles(fecha) {\n    return this.httpPedirCita.get(this.pedirCitaUrl + '/gethorasdisponibles/' + fecha).pipe(tap(citas => this._citasReservadas = citas));\n  }\n  // fetchHorarioCitas() {\n  //   return this.httpPedirCita.get<interfaces.HorarioCitasResponse>(this.pedirCitaUrl\n  //     + '/gethorariocitas').pipe(tap(horas => this._horasCitas = horas));\n  // }\n  insertCita(id, fecha, donacion) {\n    return this.httpPedirCita.post(this.pedirCitaUrl + '/pedircita', {\n      id: id,\n      fecha: fecha,\n      donacion: donacion\n    });\n  }\n  mandarCorreo(id, fecha, donacion) {\n    return this.httpPedirCita.post(this.pedirCitaUrl + '/mandarcorreocita', {\n      id: id,\n      fecha: fecha,\n      donacion: donacion\n    });\n  }\n  fetchCitaPendiente(id) {\n    return this.httpPedirCita.get(this.pedirCitaUrl + '/getcitapendienteuser/' + id).pipe(tap(resp => {\n      this._citasPendientesUser = resp.citas;\n    }));\n  }\n  fetchCitasPasadas(id) {\n    return this.httpPedirCita.get(this.pedirCitaUrl + '/getcitaspasadasuser/' + id).pipe(tap(resp => {\n      this._citasPasadasUser = resp.citas;\n    }));\n  }\n  cancelarCita(id) {\n    return this.httpPedirCita.put(this.pedirCitaUrl + '/cancelarcita/', {\n      id: id\n    });\n  }\n  compHaPedidoCita(id) {\n    return this.httpPedirCita.get(this.pedirCitaUrl + '/yatienecita/' + id);\n  }\n}\nCitasService.ɵfac = function CitasService_Factory(t) {\n  return new (t || CitasService)(i0.ɵɵinject(i1.HttpClient));\n};\nCitasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CitasService,\n  factory: CitasService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;AAC1B,SAASC,WAAW,QAAQ,6BAA6B;;;AAOzD,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,aAAyB;IAAzB,kBAAa,GAAbA,aAAa;IANzB,iBAAY,GAAG,GAAGH,WAAW,CAACI,OAAO,YAAY;EAMR;EAEjDC,qBAAqB,CAACC,KAAa;IACjC,OAAO,IAAI,CAACH,aAAa,CAACI,GAAG,CAAkC,IAAI,CAACC,YAAY,GAC5E,uBAAuB,GAAGF,KAAK,CAAC,CAACG,IAAI,CAACV,GAAG,CAACW,KAAK,IAAI,IAAI,CAACC,gBAAgB,GAAGD,KAAK,CAAC,CAAC;EACxF;EAEA;EACA;EACA;EACA;EAEAE,UAAU,CAACC,EAAU,EAAEP,KAAa,EAAEQ,QAAgB;IACpD,OAAO,IAAI,CAACX,aAAa,CAACY,IAAI,CAAgC,IAAI,CAACP,YAAY,GAC3E,YAAY,EAAE;MAACK,EAAE,EAAEA,EAAE;MAAEP,KAAK,EAAEA,KAAK;MAAEQ,QAAQ,EAAEA;IAAQ,CAAC,CAAC;EAC/D;EAGAE,YAAY,CAACH,EAAS,EAAEP,KAAa,EAAEQ,QAAgB;IACrD,OAAO,IAAI,CAACX,aAAa,CAACY,IAAI,CAAgC,IAAI,CAACP,YAAY,GAC3E,mBAAmB,EAAE;MAACK,EAAE,EAAEA,EAAE;MAAEP,KAAK,EAAEA,KAAK;MAAEQ,QAAQ,EAAEA;IAAQ,CAAC,CAAC;EACtE;EAGAG,kBAAkB,CAACJ,EAAU;IAC3B,OAAO,IAAI,CAACV,aAAa,CAACI,GAAG,CAAgC,IAAI,CAACC,YAAY,GAC1E,wBAAwB,GAAGK,EAAE,CAAC,CAACJ,IAAI,CAACV,GAAG,CAACmB,IAAI,IAAG;MAAE,IAAI,CAACC,oBAAoB,GAAGD,IAAI,CAACR,KAAK;IAAC,CAAC,CAAC,CAAC;EACjG;EAGAU,iBAAiB,CAACP,EAAU;IAC1B,OAAO,IAAI,CAACV,aAAa,CAACI,GAAG,CAAgC,IAAI,CAACC,YAAY,GAC1E,uBAAuB,GAAGK,EAAE,CAAC,CAACJ,IAAI,CAACV,GAAG,CAACmB,IAAI,IAAG;MAAE,IAAI,CAACG,iBAAiB,GAAGH,IAAI,CAACR,KAAK;IAAC,CAAC,CAAC,CAAC;EAC7F;EAEAY,YAAY,CAACT,EAAU;IACrB,OAAO,IAAI,CAACV,aAAa,CAACoB,GAAG,CAAkC,IAAI,CAACf,YAAY,GAC5E,gBAAgB,EAAE;MAACK,EAAE,EAAEA;IAAE,CAAC,CAAC;EACjC;EAEAW,gBAAgB,CAACX,EAAU;IACzB,OAAO,IAAI,CAACV,aAAa,CAACI,GAAG,CAAkC,IAAI,CAACC,YAAY,GAC9E,eAAe,GAAGK,EAAE,CAAC;EACzB;;AAlDWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAwB,SAAZxB,YAAY;EAAAyB,YAFX;AAAM","names":["tap","environment","CitasService","constructor","httpPedirCita","baseUrl","fetchHorasDisponibles","fecha","get","pedirCitaUrl","pipe","citas","_citasReservadas","insertCita","id","donacion","post","mandarCorreo","fetchCitaPendiente","resp","_citasPendientesUser","fetchCitasPasadas","_citasPasadasUser","cancelarCita","put","compHaPedidoCita","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\citas\\services\\citas.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs';\r\nimport { environment } from 'src/environment/environment';\r\nimport * as interfaces from '../interfaces/citas.interface';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CitasService {\r\n  private pedirCitaUrl = `${environment.baseUrl}/api/citas`;\r\n  private _horasCitas: any;\r\n  private _citasReservadas: any;\r\n  private _citasPendientesUser: interfaces.Cita[];\r\n  private _citasPasadasUser: interfaces.Cita[];\r\n\r\n  constructor(private httpPedirCita: HttpClient) { }\r\n\r\n  fetchHorasDisponibles(fecha: string) {\r\n    return this.httpPedirCita.get<interfaces.HorarioCitasResponse>(this.pedirCitaUrl \r\n      + '/gethorasdisponibles/' + fecha).pipe(tap(citas => this._citasReservadas = citas));\r\n  }\r\n\r\n  // fetchHorarioCitas() {\r\n  //   return this.httpPedirCita.get<interfaces.HorarioCitasResponse>(this.pedirCitaUrl\r\n  //     + '/gethorariocitas').pipe(tap(horas => this._horasCitas = horas));\r\n  // }\r\n\r\n  insertCita(id: string, fecha: string, donacion: string) {\r\n    return this.httpPedirCita.post<interfaces.SuccessMsgResponse>(this.pedirCitaUrl\r\n      + '/pedircita', {id: id, fecha: fecha, donacion: donacion});\r\n  }\r\n\r\n\r\n  mandarCorreo(id:string, fecha: string, donacion: string) {\r\n    return this.httpPedirCita.post<interfaces.SuccessMsgResponse>(this.pedirCitaUrl\r\n      + '/mandarcorreocita', {id: id, fecha: fecha, donacion: donacion});\r\n  }\r\n\r\n\r\n  fetchCitaPendiente(id: string) {\r\n    return this.httpPedirCita.get<interfaces.FetchCitasResponse>(this.pedirCitaUrl\r\n      + '/getcitapendienteuser/' + id).pipe(tap(resp => {this._citasPendientesUser = resp.citas;}));\r\n  }\r\n\r\n  \r\n  fetchCitasPasadas(id: string) {\r\n    return this.httpPedirCita.get<interfaces.FetchCitasResponse>(this.pedirCitaUrl\r\n      + '/getcitaspasadasuser/' + id).pipe(tap(resp => {this._citasPasadasUser = resp.citas;}));\r\n  }\r\n\r\n  cancelarCita(id: string) {\r\n    return this.httpPedirCita.put<interfaces.CancelarCitaResponse>(this.pedirCitaUrl\r\n      + '/cancelarcita/', {id: id});\r\n  }\r\n\r\n  compHaPedidoCita(id: string) {\r\n    return this.httpPedirCita.get<interfaces.CancelarCitaResponse>(this.pedirCitaUrl + \r\n      '/yatienecita/' + id);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}