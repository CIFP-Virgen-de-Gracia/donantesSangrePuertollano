{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContenidoService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n    this.noticias = [];\n  }\n  getListado() {\n    return this.http.get(`${this.baseUrl}/api/noticias/noticias`).pipe(tap(resp => {\n      if (resp.success !== false) {\n        this.noticias = resp.data;\n      }\n    }));\n  }\n  get resultado() {\n    return [...this.noticias];\n  }\n  agregar(noticia) {\n    this.noticias.unshift(noticia);\n  }\n  editar(noticia) {\n    let posicion = this.noticias.findIndex(n => n.id == noticia.id);\n    this.noticias[posicion] = noticia;\n  }\n  borrar(id) {\n    let not = this.noticias.filter(noticia => noticia.id != id);\n    this.noticias = not;\n  }\n  borrarNoticia(id) {\n    const header = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'x-token': JSON.parse(localStorage.getItem('user')).token\n      })\n    };\n    return this.http.delete(`${this.baseUrl}/api/noticias/borrar/${id}`, header);\n  }\n  editarNoticia(id, noticia) {\n    console.log(noticia);\n    const payload = new FormData();\n    payload.append('id', id);\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')).token\n      })\n    };\n    return this.http.put(`${this.baseUrl}/api/noticias/modificar/`, payload, header);\n  }\n  obtenerNoticia(id) {\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')).token\n      })\n    };\n    return this.http.post(`${this.baseUrl}/api/noticias/get`, {\n      id: id\n    }, header);\n  }\n  añadirNoticia(noticia) {\n    const payload = new FormData();\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')).token\n      })\n    };\n    return this.http.post(`${this.baseUrl}/api/noticias/registrar`, payload, header);\n  }\n}\nContenidoService.ɵfac = function ContenidoService_Factory(t) {\n  return new (t || ContenidoService)(i0.ɵɵinject(i1.HttpClient));\n};\nContenidoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContenidoService,\n  factory: ContenidoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","tap","environment","ContenidoService","constructor","http","baseUrl","noticias","getListado","get","pipe","resp","success","data","resultado","agregar","noticia","unshift","editar","posicion","findIndex","n","id","borrar","not","filter","borrarNoticia","header","headers","JSON","parse","localStorage","getItem","token","delete","editarNoticia","console","log","payload","FormData","append","titulo","subtitulo","contenido","seccion","imagen","put","obtenerNoticia","post","añadirNoticia","factory","providedIn"],"sourceRoot":"","sources":["/home/mario/donantesSangrePuertollano/front/src/app/gestion-contenido/contenido.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Contenido,Noticia,Response,ResponseNoticia } from './Interfaces/Contenido.interface';\nimport { tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContenidoService {\n\n  baseUrl = environment.baseUrl;\n  private noticias: Noticia[];\n\n  constructor(private http: HttpClient) {\n    this.noticias = [];\n  }\n\n  getListado() {\n    return this.http.get<Response>(`${this.baseUrl}/api/noticias/noticias`).pipe(tap(resp => { if (resp.success !== false) { this.noticias = resp.data } }))\n  }\n  get resultado() {\n    return [...this.noticias];\n  }\n  agregar(noticia:Noticia) {\n    this.noticias.unshift(noticia);\n  }\n\n  editar(noticia: Noticia) {\n    let posicion = this.noticias.findIndex(n => n.id == noticia.id);\n    this.noticias[posicion] = noticia;\n  }\n  borrar(id: string) {\n    let not = this.noticias.filter((noticia) => noticia.id != id);\n    this.noticias = not;\n  }\n  borrarNoticia(id: string): Observable<ResponseNoticia> {\n    const header = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n        'x-token': JSON.parse(localStorage.getItem('user')!).token\n      })\n    };\n    return this.http.delete<ResponseNoticia>(`${this.baseUrl}/api/noticias/borrar/${id}`,header);\n  }\n  editarNoticia(id: string, noticia:Noticia): Observable<ResponseNoticia> {\n    console.log(noticia);\n    const payload = new FormData();\n    payload.append('id', id);\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')!).token\n      })\n    };\n\n    return this.http.put<ResponseNoticia>(`${this.baseUrl}/api/noticias/modificar/`, payload, header);\n  }\n\n  obtenerNoticia(id: string): Observable<ResponseNoticia> {\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')!).token\n      })\n    };\n    return this.http.post<ResponseNoticia>(`${this.baseUrl}/api/noticias/get`, {id: id},header);\n  }\n\n  añadirNoticia(noticia: Contenido): Observable<ResponseNoticia> {\n    const payload = new FormData();\n    payload.append('titulo', noticia.titulo);\n    payload.append('subtitulo', noticia.subtitulo);\n    payload.append('contenido', noticia.contenido);\n    payload.append('seccion', noticia.seccion);\n    payload.append('archivo', noticia.imagen);\n    const header = {\n      headers: new HttpHeaders({\n        'x-token': JSON.parse(localStorage.getItem('user')!).token\n      })\n    };\n\n    return this.http.post<ResponseNoticia>(`${this.baseUrl}/api/noticias/registrar`, payload, header);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}