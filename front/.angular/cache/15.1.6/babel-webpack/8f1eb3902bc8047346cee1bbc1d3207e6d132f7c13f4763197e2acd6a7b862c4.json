{"ast":null,"code":"import { map, of, tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpUsers) {\n    this.httpUsers = httpUsers;\n    this.authUrl = `${environment.baseUrl}/api`; // cambiar en el server // hacer archivo env\n  }\n\n  login(user) {\n    return this.httpUsers.post(this.authUrl + '/login', user).pipe(tap(auth => this._auth = auth));\n  }\n  registro(user) {\n    return this.httpUsers.post(this.authUrl + '/register', user);\n  }\n  solicitarRecPasswd(email) {\n    return this.httpUsers.post(this.authUrl + '/solicitarrecpasswd', {\n      email: email\n    });\n  }\n  recuperarPasswd(id, cod) {\n    return this.httpUsers.post(this.authUrl + '/recuperarpasswd/' + id, {\n      cod: cod\n    });\n  }\n  puedeModificar() {\n    const user = localStorage.getItem('user');\n    if (!user) {\n      return of(false);\n    } else {\n      return this.httpUsers.get(`${this.authUrl}/puedeModificar/${JSON.parse(user).id}`).pipe(map(auth => {\n        if (auth.success) {\n          this._auth = auth;\n          return true;\n        } else {\n          return false;\n        }\n      }));\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,EAAcC,EAAE,EAAEC,GAAG,QAAQ,MAAM;AAC/C,SAASC,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,SAAqB;IAArB,cAAS,GAATA,SAAS;IAHrB,YAAO,GAAW,GAAGH,WAAW,CAACI,OAAO,MAAM,CAAC,CAAC;EAGX;;EAG7CC,KAAK,CAACC,IAA0B;IAE9B,OAAO,IAAI,CAACH,SAAS,CAACI,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAG,QAAQ,EAAEF,IAAI,CAAC,CACvEG,IAAI,CAACV,GAAG,CAACW,IAAI,IAAI,IAAI,CAACC,KAAK,GAAGD,IAAI,CAAC,CAAC;EACzC;EAGAE,QAAQ,CAACN,IAA6B;IAEpC,OAAO,IAAI,CAACH,SAAS,CAACI,IAAI,CAA8B,IAAI,CAACC,OAAO,GAAG,WAAW,EAAEF,IAAI,CAAC;EAC3F;EAGAO,kBAAkB,CAACC,KAAa;IAE9B,OAAO,IAAI,CAACX,SAAS,CAACI,IAAI,CAAwC,IAAI,CAACC,OAAO,GAC1E,qBAAqB,EAAE;MAAEM,KAAK,EAAEA;IAAK,CAAE,CAAC;EAC9C;EAGAC,eAAe,CAACC,EAAU,EAAEC,GAAW;IACrC,OAAO,IAAI,CAACd,SAAS,CAACI,IAAI,CAA+B,IAAI,CAACC,OAAO,GACjE,mBAAmB,GAAGQ,EAAE,EAAE;MAAEC,GAAG,EAAEA;IAAG,CAAE,CAAC;EAC7C;EAGAC,cAAc;IAEZ,MAAMZ,IAAI,GAAGa,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAEzC,IAAI,CAACd,IAAI,EAAE;MACT,OAAOR,EAAE,CAAC,KAAK,CAAC;KAEjB,MAAM;MACL,OAAO,IAAI,CAACK,SAAS,CAACkB,GAAG,CAAkB,GAAG,IAAI,CAACb,OAAO,mBAAmBc,IAAI,CAACC,KAAK,CAACjB,IAAI,CAAC,CAACU,EAAE,EAAE,CAAC,CAChGP,IAAI,CACHZ,GAAG,CAACa,IAAI,IAAG;QACT,IAAIA,IAAI,CAACc,OAAO,EAAE;UAEhB,IAAI,CAACb,KAAK,GAAGD,IAAI;UACjB,OAAO,IAAI;SAEZ,MAAM;UACL,OAAO,KAAK;;MAEhB,CAAC,CAAC,CACH;;EAEP;;AAxDWT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["map","of","tap","environment","AuthService","constructor","httpUsers","baseUrl","login","user","post","authUrl","pipe","auth","_auth","registro","solicitarRecPasswd","email","recuperarPasswd","id","cod","puedeModificar","localStorage","getItem","get","JSON","parse","success","factory","providedIn"],"sourceRoot":"","sources":["/home/mario/donantesSangrePuertollano/front/src/app/auth/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as interfaces from '../interfaces/auth.interface';\nimport { map, Observable, of, tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authUrl: string = `${environment.baseUrl}/api`; // cambiar en el server // hacer archivo env\n  private _auth: interfaces.Auth | undefined;\n\n  constructor(private httpUsers: HttpClient) { }\n\n\n  login(user: interfaces.UserLogin) {\n\n    return this.httpUsers.post<interfaces.Auth>(this.authUrl + '/login', user)\n      .pipe(tap(auth => this._auth = auth));\n  }\n\n\n  registro(user: interfaces.UserRegsitro) {\n\n    return this.httpUsers.post<interfaces.registroResponse>(this.authUrl + '/register', user);\n  }\n\n\n  solicitarRecPasswd(email: string) {\n\n    return this.httpUsers.post<interfaces.solicitarRecPasswdResponse>(this.authUrl\n      + '/solicitarrecpasswd', { email: email });\n  }\n\n\n  recuperarPasswd(id: string, cod: string) {\n    return this.httpUsers.post<interfaces.recPasswdResponse>(this.authUrl\n      + '/recuperarpasswd/' + id, { cod: cod });\n  }\n\n\n  puedeModificar(): Observable<boolean> {\n\n    const user = localStorage.getItem('user');\n\n    if (!user) {\n      return of(false);\n\n    } else {\n      return this.httpUsers.get<interfaces.Auth>(`${this.authUrl}/puedeModificar/${JSON.parse(user).id}`)\n        .pipe(\n          map(auth => {\n            if (auth.success) {\n\n              this._auth = auth;\n              return true;\n\n            } else {\n              return false;\n            }\n          })\n        );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}