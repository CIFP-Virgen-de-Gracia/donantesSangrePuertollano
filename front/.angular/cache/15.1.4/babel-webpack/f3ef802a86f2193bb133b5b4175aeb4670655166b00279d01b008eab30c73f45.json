{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpUsers) {\n    this.httpUsers = httpUsers;\n    this.authUrl = `${environment.baseUrl}/api`; // cambiar en el server // hacer archivo env\n  }\n\n  login(user) {\n    return this.httpUsers.post(this.authUrl + '/login', user).pipe(tap(auth => this._auth = auth));\n  }\n  registro(user) {\n    return this.httpUsers.post(this.authUrl + '/register', user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;AAC1B,SAASC,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,SAAqB;IAArB,cAAS,GAATA,SAAS;IAHrB,YAAO,GAAW,GAAGH,WAAW,CAACI,OAAO,MAAM,CAAE,CAAC;EAGb;;EAE5CC,KAAK,CAAEC,IAAe;IAEpB,OAAO,IAAI,CAACH,SAAS,CAACI,IAAI,CAAO,IAAI,CAACC,OAAO,GAAG,QAAQ,EAAEF,IAAI,CAAC,CAC5DG,IAAI,CAACV,GAAG,CAACW,IAAI,IAAI,IAAI,CAACC,KAAK,GAAGD,IAAI,CAAC,CAAC;EACzC;EAEAE,QAAQ,CAAEN,IAAkB;IAE1B,OAAO,IAAI,CAACH,SAAS,CAACI,IAAI,CAAmB,IAAI,CAACC,OAAO,GAAG,WAAW,EAAEF,IAAI,CAAC;EAChF;;AAhBWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["tap","environment","AuthService","constructor","httpUsers","baseUrl","login","user","post","authUrl","pipe","auth","_auth","registro","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Alicia\\Documents\\Clase\\DAW\\Segundo\\Desafio3_DonantesSangre\\donantesSangrePuertollano\\front\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { UserLogin, Auth, UserRegsitro, registroResponse } from '../interfaces/auth.interface';\r\nimport { tap } from 'rxjs';\r\nimport { environment } from 'src/environment/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private authUrl: string = `${environment.baseUrl}/api` ; // cambiar en el server // hacer archivo env\r\n  private _auth: Auth | undefined;\r\n\r\n  constructor(private httpUsers: HttpClient) {}\r\n\r\n  login (user: UserLogin) {\r\n\r\n    return this.httpUsers.post<Auth>(this.authUrl + '/login', user)\r\n      .pipe(tap(auth => this._auth = auth));\r\n  }\r\n\r\n  registro (user: UserRegsitro) {\r\n\r\n    return this.httpUsers.post<registroResponse>(this.authUrl + '/register', user);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}